#!/bin/bash

cachefolder() {
	timeecho "Building ${PWD} ls-files cache to speed up directory scanning"

	find modules -type f \
		-not -path '*/build/*' \
		-not -path '*/classes/*' \
		-not -path '*/node_modules/*' \
		-not -path '*/node_modules_cache/*' \
		> modules/git_ls_files_modules.txt
}

cachemodules() {
	for folder in $@; do
		if [ ! -d "${folder}" ] || [ ! -d "${folder}/modules" ]; then
			continue
		fi

		pushd "${folder}" > /dev/null
		cachefolder
		popd > /dev/null
	done

	if [ -d modules ]; then
		cachefolder
	fi
}

checknode() {
	NODEJS=$(which nodejs 2> /dev/null)

	if [ "" == "${NODEJS}" ]; then
		NODEJS=$(which node 2> /dev/null)
	fi

	if [ "" == "${NODEJS}" ]; then
		timeecho "Please install node.js"
		exit 1
	fi

	local NPM=$(which npm 2> /dev/null)

	if [ "" == "${NPM}" ]; then
		timeecho "Please install npm"
		exit 1
	fi

	if [ ! -d ${HOME}/.npm ]; then
		timeecho "Please install nvm"
		exit 1
	fi

	export NVM_DIR="${HOME}/.nvm"
	source "${NVM_DIR}/nvm.sh"

	local SCRIPT_ROOT="$(dirname "${BASH_SOURCE[0]}")"

	pushd "${SCRIPT_ROOT}" > /dev/null

	checknodemodules

	popd > /dev/null
}

checknodemodules() {
	nvm current > node.version.new

	nvm install
	nvm use

	if [ -f node.version.old ]; then
		if [ "$(cat node.version.old)" != "$(cat node.version.new)" ]; then
			rm -rf node_modules
		fi

		rm node.version.old
	else
		rm -rf node_modules
	fi

	mv node.version.new node.version.old

	local NPM_MAJOR_VERSION=$(npm --version | cut -d'.' -f 1)
	local NPM_MINOR_VERSION=$(npm --version | cut -d'.' -f 2)

	if [[ ${NPM_MAJOR_VERSION} -lt 5 ]]; then
		timeecho 'Running npm install to update script dependencies'

		npm install
	elif [[ ${NPM_MAJOR_VERSION} -eq 5 ]] && [[ ${NPM_MINOR_VERSION} -lt 7 ]]; then
		timeecho 'Running npm install to update script dependencies'

		npm install
	else
		timeecho 'Running npm ci to update script dependencies'

		rm -f npm-shrinkwrap.json
		npm ci
		git checkout npm-shrinkwrap.json > /dev/null
	fi
}

mavenjar() {
	local GROUP_FOLDER=$(echo ${1} | tr '.' '/')

	if [ ! -f ${HOME}/.m2/repository/${GROUP_FOLDER}/${2}/${3}/${2}-${3}.jar ]; then
		mvn -DgroupId=${1} -DartifactId=${2} -Dversion=${3} dependency:get
	fi
}

copylibs() {
	if [ ! -d modules ]; then
		return 0
	fi

	if [ "" != "$(which mvn)" ]; then
		mavenjar org.jacoco org.jacoco.agent 0.8.4
	fi

	if [ -d ../liferay-binaries-cache-2017 ] && [ -d ../liferay-binaries-cache-2020 ]; then
		return 0
	fi

	if [ -d ../liferay-binaries-cache-2017 ] || [ -d ../liferay-binaries-cache-2020 ]; then
		if [ -d ../liferay-binaries-cache-2017 ]; then
			timeecho 'Missing clone of https://github.com/liferay/liferay-binaries-cache-2020'
			timeecho 'Some dependency libraries may be missing if they are present in liferay-binaries-cache-2017 but not liferay-binaries-cache-2020'
		else
			timeecho 'Missing clone of https://github.com/liferay/liferay-binaries-cache-2017'
			timeecho 'Some dependency libraries may be missing if they are present in liferay-binaries-cache-2020 but not liferay-binaries-cache-2017'
		fi

		return 0
	fi

	timeecho 'Missing clone of https://github.com/liferay/liferay-binaries-cache-2017'
	timeecho 'Missing clone of https://github.com/liferay/liferay-binaries-cache-2020'

	if [ -f .git ] || [ -d .git ]; then
		timeecho 'Please clone these repositories (or create a symbolic link to the clone of these repositories) and run this script again'

		echo ''
		echo 'cd ..'
		echo 'git clone git@github.com:liferay/liferay-binaries-cache-2017.git'
		echo 'git clone git@github.com:liferay/liferay-binaries-cache-2020.git'

		return 1
	fi

	if [ "" == "$(which mvn)" ]; then
		timeecho 'Maven is not available in the path, dependency libraries will be missing'
		return 1
	fi

	timeecho 'Retrieving dependency libraries using Maven'

	"${NODEJS}" "${SCRIPT_FOLDER}/bin/pom.js" "${PWD}"

	mvn --fail-at-end dependency:go-offline
	grep '<module>.*</module>' pom.xml | awk -F'[<>]' '{ print $3 "/pom.xml" }' | xargs rm
	rm pom.xml

	for folder in development global portal; do
		if [ ! -f lib/$folder/dependencies.properties ]; then
			continue
		fi

		for dependency in $(cat lib/$folder/dependencies.properties); do
			local lib_jar=lib/$folder/$(echo $dependency | cut -d'=' -f 1).jar

			local group_maven=$(echo $dependency | cut -d'=' -f 2 | cut -d':' -f 1 | tr '.' '/')
			local name=$(echo $dependency | cut -d'=' -f 2 | cut -d':' -f 2)
			local version=$(echo $dependency | cut -d'=' -f 2 | cut -d':' -f 3)

			local maven_path=$HOME/.m2/repository/${group_maven}/${name}/${version}/${name}-${version}.jar

			if [ -f $maven_path ]; then
				cp $maven_path $lib_jar
				continue
			fi
		done
	done
}

enabledebug() {
	if [ -f .idea/workspace.xml ] && [ "" != "$(grep -F RunManager .idea/workspace.xml)" ]; then
		return 0
	fi

	local SCRIPT_ROOT="$(dirname "${BASH_SOURCE[0]}")"

	if [ -d .idea/runConfigurations ]; then
		return 0
	fi

	mkdir -p .idea/runConfigurations

	if [ "" != "$(grep -F webroots portal-web/portal-web-docroot.iml)" ]; then
		cp -f ${SCRIPT_ROOT}/localhost_8000_iu.xml .idea/runConfigurations/localhost_8000.xml
	else
		cp -f ${SCRIPT_ROOT}/localhost_8000_ic.xml .idea/runConfigurations/localhost_8000.xml
	fi
}

ignoreiml() {
	if [ -d .git ] || [ -f .git ]; then
		git ls-files | grep '\(\.idea\|\.iml\)' | xargs git update-index --assume-unchanged
	fi
}

licensing() {
	if [ ! -e .git ]; then
		return 0
	fi

	if [ -d modules/apps/static/portal-license/portal-license-enterprise-app ]; then
		return 0
	fi

	local APP_VERSION=$(grep build.portal.license.enterprise.app.module.version= build.properties | cut -d'=' -f 2)

	if [ "" == "${APP_VERSION}" ]; then
		return 0
	fi

	local UPSTREAM_REMOTE=$(git remote -v | grep -F ':liferay/liferay-portal-ee' | awk '{ print $1 }')

	if [ "" == "${UPSTREAM_REMOTE}" ]; then
		return 0
	fi

	local UPSTREAM_BRANCH=$(git for-each-ref "refs/remotes/${UPSTREAM_REMOTE}/7.1.x")

	if [ "" == "${UPSTREAM_BRANCH}" ]; then
		return 0
	fi

	local APP_COMMIT=$(git log "${UPSTREAM_BRANCH}" --pretty='%H' --grep=" ${APP_VERSION} prep next$" -- modules/apps/static/portal-license/portal-license-enterprise-app/bnd.bnd)

	if [ "" == "${APP_COMMIT}" ]; then
		return 0
	fi

	git checkout ${APP_COMMIT} -- modules/apps/static/portal-license/portal-license-enterprise-app/
}

setantopts() {
	local JAVA_VERSION=$(java -version 2>&1 | head -1 | cut -d'"' -f 2)

	ANT_OPTS='-Xms2g -Xmx2g'

	if [ "1" == "$(echo "${JAVA_VERSION}" | cut -d'.' -f 1)" ] && [[ 8 -gt $(echo "${JAVA_VERSION}" | cut -d'.' -f 2) ]]; then
		ANT_OPTS="${ANT_OPTS} -XX:MaxPermSize=1g"
	fi

	export ANT_OPTS
}

setupsdk() {
	if [ ! -f build.xml ] || [ ! -d modules ]; then
		return 0
	fi

	rm -rf .idea/libraries

	local NEEDS_SETUP_LIBS=

	for folder in development global portal; do
		if [ -f "lib/$folder/dependencies.properties" ] && [[ $(ls -1 lib/$folder/ | grep -c '\.jar$') -lt $(cat "lib/$folder/dependencies.properties" | wc -l) ]]; then
			NEEDS_SETUP_LIBS=true
		fi
	done

	if [ -d tools/sdk ] && [ "" == "${NEEDS_SETUP_LIBS}" ]; then
		return 0
	fi

	setantopts

	timeecho 'Running ant setup-sdk to initialize gradle configuration'

	ant setup-sdk setup-libs
}

setupwork() {
	if [ -d portal-impl ] || [ ! -f build-working-dir.xml ]; then
		return 0
	fi

	local LOCAL_BRANCH=$(grep -o '`[^`]*`' "README.markdown" | cut -d'`' -f 2 | uniq)

	if [ "" == "${LOCAL_BRANCH}" ]; then
		LOCAL_BRANCH=7.0.x
	fi

	local UPSTREAM_BRANCH=$(git for-each-ref --format='%(refname)' refs/remotes/ | grep "/upstream[^/]*/$LOCAL_BRANCH$" | cut -d'/' -f 3,4)

	local WORKING_DIR_HASH=$(cat git-commit-portal)

	git merge-base $UPSTREAM_BRANCH $WORKING_DIR_HASH > /dev/null

	if [[ 0 -ne $? ]]; then
		timeecho "Specified $LOCAL_BRANCH hash not available, fetching latest $UPSTREAM_BRANCH"

		git fetch --no-tags $(echo $UPSTREAM_BRANCH | tr '/' ' ')
	fi

	ant -f build-working-dir.xml
}

timeecho() {
	echo '['$(date '+%H:%M:%S')']' $@
}

uncachemodules() {
	for folder in $@; do
		if [ ! -d "${folder}" ]; then
			continue
		fi

		rm -f ${folder}/modules/git_ls_files_modules.txt
	done

	rm -f modules/git_ls_files_modules.txt
}

setupwork

if [ ! -d portal-impl ]; then
	timeecho 'Unable to find portal-impl folder, the current working directory does not appear to be the portal source'
	timeecho 'Please navigate to the portal source folder and then re-run your command'
	timeecho 'Note: additional arguments are additional source roots (blade workspaces, subrepositories, plugins SDK, etc.)'
	exit 1
fi